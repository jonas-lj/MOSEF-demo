package dk.jonaslindstrom.mosef.demo;

import dk.jonaslindstrom.mosef.MOSEF;
import dk.jonaslindstrom.mosef.MOSEFSettings;
import dk.jonaslindstrom.mosef.midi.MIDIParser;
import dk.jonaslindstrom.mosef.modules.Module;
import dk.jonaslindstrom.mosef.modules.envelope.ADSREnvelope;
import dk.jonaslindstrom.mosef.modules.glide.Glide;
import dk.jonaslindstrom.mosef.modules.melody.SimpleMelody;
import dk.jonaslindstrom.mosef.modules.tuning.tuningfunction.WellTemperedTuningFunction;
import dk.jonaslindstrom.mosef.util.Pair;
import dk.jonaslindstrom.mosef.util.Utils;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Base64;
import java.util.concurrent.TimeUnit;
import javax.sound.midi.InvalidMidiDataException;

/**
 * This demo plays the solo from "Lucky Man" by Emerson, Lake & Palmer.
 *
 * @author Jonas Lindstr√∏m (jonas.lindstrom@alexandra.dk)
 */
public class LuckyMan {

  public static void main(String[] arguments)
      throws InvalidMidiDataException, IOException, InterruptedException, ClassNotFoundException {

    MOSEFSettings settings = new MOSEFSettings(44100, 512, 16);
    MOSEF m = new MOSEF(settings);

    String melodyEncoded = "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";
    SimpleMelody melody = SimpleMelody.decode(melodyEncoded);

    Pair<Module, Module> melodyModule = melody
        .getMonophonicVoice(settings, new WellTemperedTuningFunction());

    Module v1 = buildVoice(settings, melodyModule.first, melodyModule.second);

    Module filtered = m.filter(v1, 500);

    Module out = m.amplifier(filtered, 0.2);

    Module[] delaySplit = m.split(out, 2);

    m.audioOut(delaySplit[0], m.delay(delaySplit[1], 0.01));
    m.start();

    TimeUnit.MINUTES.sleep(2);

    m.stop();
  }

  private static Module buildVoice(MOSEFSettings settings, Module in, Module gate) {
    MOSEF m = new MOSEF(settings);

    Module f = new Glide(settings, in, 1800);

    Module[] gateSplit = m.split(gate, 2);
    Module[] fSplit = m.split(f, 3);

    Module square1 = m.square(m.multiplier(fSplit[0], Utils.ratioFromCents(3)));
    Module square2 = m.square(m.multiplier(fSplit[1], Utils.ratioFromCents(-4)));
    Module square3 = m.square(m.multiplier(fSplit[2], Utils.ratioFromCents(11)));

    Module mix = m.mixer(square1, square2, m.amplifier(square3, 0.5));

    Module envelope = new ADSREnvelope(settings, gateSplit[0], 0.01, 1.0, 0.8, 0.8);

    return m.amplifier(mix, envelope);
  }

}
